unit Logger;

{
  ┌───────────────────────────────────────────────────────────────────┐
  │ Автор: Бегтин К.В. (Огнеяр)                                       │
  │ Название проекта: Библиотека Дементора                            │
  │ Лицензия: Freeware                                                │
  │ Год создания: 2025                                                │
  │ Версия: 3.1                                                       │
  │                                                                   │
  │ Назначение модуля:                                                │
  │ Модуль Logger предоставляет функциональность для логирования      │
  │ операций и ошибок приложения. Включает методы для записи          │
  │ отладочной информации, информационных сообщений, предупреждений   │
  │ и ошибок в файл. Поддерживает ротацию логов, форматирование       │
  │ сообщений и интеграцию с локализацией (i18n).                     │
  └───────────────────────────────────────────────────────────────────┘
}

interface

uses
  System.SysUtils, System.IOUtils, System.TypInfo, System.Classes,
  System.IniFiles,
  System.Generics.Collections, // Подключение для TStack
  I18N.Manager; // Подключение модуля для локализации

type
  // Уровни логирования
  TLogLevel = (llDebug, llInfo, llWarning, llError);

  // Класс для логирования
  TLogger = class
  private
    FLogFile: string; // Путь к файлу логов
    FMaxLogSize: Int64; // Максимальный размер файла логов
    FCallStack: TStack<string>; // Стек вызовов
    FI18NManager: TI18NManager; // Менеджер локализации
    procedure WriteToFile(const Level: TLogLevel; const Msg: string);
    // Запись в файл
    procedure RotateLogs; // Ротация логов
  public
    constructor Create; // Конструктор
    destructor Destroy; override; // Деструктор

    // Методы для логирования
    procedure Debug(const Msg: string); // Логирование отладочной информации
    procedure Info(const Msg: string); // Логирование информационных сообщений
    procedure Warning(const Msg: string); // Логирование предупреждений
    procedure Error(const Msg: string); // Логирование ошибок

    // Управление стеком вызовов
    procedure SetName(const Name: string); // Добавить имя в стек
    procedure ReleaseName; // Удалить имя из стека

    // Локализация
    procedure SetI18NManager(AManager: TI18NManager);
    // Установка менеджера локализации
  end;

var
  Log: TLogger; // Глобальный экземпляр логгера

implementation

{ TLogger }

constructor TLogger.Create;
var
  IniFile: TIniFile;
  ConfigFilePath: string;
  FileHandle: TextFile;
begin
  inherited Create;

  // Чтение настроек из конфигурационного файла
  ConfigFilePath := ExtractFilePath(ParamStr(0)) + 'config.ini';

  // Если файл конфигурации не существует, создаем его с параметрами по умолчанию
  if not FileExists(ConfigFilePath) then
  begin
    IniFile := TIniFile.Create(ConfigFilePath);
    try
      IniFile.WriteString('Logger', 'LogFile', 'logs\catalog.log');
      IniFile.WriteInteger('Logger', 'MaxLogSize', 1048576); // 1 МБ
    finally
      IniFile.Free;
    end;
  end;

  // Инициализация переменной IniFile после проверки
  IniFile := TIniFile.Create(ConfigFilePath);
  try
    FLogFile := ExtractFilePath(ParamStr(0)) + IniFile.ReadString('Logger',
      'LogFile', 'logs\app.log');
    FMaxLogSize := IniFile.ReadInteger('Logger', 'MaxLogSize', 1048576);
  finally
    IniFile.Free;
  end;

  // Открытие файла для записи
  AssignFile(FileHandle, FLogFile);
  try
    // Проверка, открыт ли файл успешно
    if FileExists(FLogFile) then
      Append(FileHandle)
    else
      Rewrite(FileHandle);
    Writeln(FileHandle, 'Logger initialized');
  except
    on E: EInOutError do
      Writeln('Ошибка при открытии файла лога: ', E.Message);
  end;
  CloseFile(FileHandle);

  // Инициализация стека вызовов
  FCallStack := TStack<string>.Create;

  // Убедимся, что директория для логов существует
  ForceDirectories(ExtractFilePath(FLogFile));

  // Ротация логов при создании логгера
  RotateLogs;
end;

destructor TLogger.Destroy;
begin
  // Освобождение ресурсов
  FCallStack.Free;
  inherited;
end;

procedure TLogger.RotateLogs;
var
  BackupFile: string;
  I: Integer;
begin
  // Если файл логов не существует или его размер меньше максимального, выходим
  if not FileExists(FLogFile) or (TFile.GetSize(FLogFile) < FMaxLogSize) then
    Exit;

  // Ищем свободное имя для резервной копии
  I := 1;
  repeat
    BackupFile := ChangeFileExt(FLogFile, '') + '_' + IntToStr(I) + '.log';
    Inc(I);
  until not FileExists(BackupFile);

  // Переименовываем текущий лог в резервную копию
  TFile.Move(FLogFile, BackupFile);
end;

procedure TLogger.WriteToFile(const Level: TLogLevel; const Msg: string);
var
  LogMsg: string;
  LogFile: TextFile;
  CallStackStr: string;
begin
  // Формируем сообщение для записи
  if FCallStack.Count > 0 then
    CallStackStr := '[' + FCallStack.Peek + '] '
  else
    CallStackStr := '';

  LogMsg := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now) + ' [' +
    GetEnumName(TypeInfo(TLogLevel), Ord(Level)) + '] ' + CallStackStr + Msg;

  // Открываем файл для записи (добавляем в конец)
  AssignFile(LogFile, FLogFile);
  if FileExists(FLogFile) then
    Append(LogFile)
  else
    Rewrite(LogFile);

  try
    WriteLn(LogFile, LogMsg); // Записываем сообщение
  finally
    CloseFile(LogFile); // Закрываем файл
  end;
end;

procedure TLogger.Debug(const Msg: string);
begin
  WriteToFile(llDebug, Msg);
end;

procedure TLogger.Info(const Msg: string);
begin
  WriteToFile(llInfo, Msg);
end;

procedure TLogger.Warning(const Msg: string);
begin
  WriteToFile(llWarning, Msg);
end;

procedure TLogger.Error(const Msg: string);
begin
  WriteToFile(llError, Msg);
end;

procedure TLogger.SetName(const Name: string);
begin
  // Добавляем имя в стек вызовов
  FCallStack.Push(Name);
end;

procedure TLogger.ReleaseName;
begin
  // Удаляем имя из стека вызовов
  if FCallStack.Count > 0 then
    FCallStack.Pop;
end;

procedure TLogger.SetI18NManager(AManager: TI18NManager);
begin
  // Устанавливаем менеджер локализации
  FI18NManager := AManager;
end;

initialization

Log := TLogger.Create; // Создаём глобальный экземпляр логгера

finalization

Log.Free; // Освобождаем ресурсы

end.
